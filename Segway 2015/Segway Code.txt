import math
import sys
import RTIMU
import time
import RPi.GPIO as GPIO
#import cal_vals
import calibration

#initialize PID controller constants


#Setting up I2C comunication with the IMU
SETTINGS_FILE = "RTIMU1"
s = RTIMU.Settings("RTIMU1")
imu = RTIMU.RTIMU(s)
if (not imu.IMUInit()):
        print("IMU Init Failed");
        sys.exit(1)
else:
        print("IMU Init succeeded")

poll_interval = imu.IMUGetPollInterval()

def updateAngle():
	if imu.IMURead():
		data = imu.getIMUData()
		accelData = data["accel"]
		gyroData =  data["gyro"]
		theta=math.atan2(accelData[1],accelData[2])
		newAngle=0.98*(currentAngle*math.pi/180.0+(gyroData[0]-gB*math.pi/180.0)*dt)+0.02*theta
	else:
		newAngle=currentAngle*math.pi/180.0
	return math.degrees(newAngle)

def initialAngle():
	n=500	
	theta=0
		
	for i in range(n):
		if imu.IMURead():
			data = imu.getIMUData()
           	accelData = data["accel"]
           	theta+=math.degrees(math.atan2(accelData[1],accelData[2]))
           	time.sleep(poll_interval*1.0/1000.0)
	angle=theta/n
	return angle

#Initialize pins
GPIO.setmode(GPIO.BOARD)
input1 = 13
input2 = 15
enableA = 18
input3 = 12
input4 = 16
enableB = 22
# Try to change the frequency!
pwmfreq = 800
GPIO.setup(input1, GPIO.OUT)
GPIO.setup(input2, GPIO.OUT)
GPIO.setup(enableA, GPIO.OUT)
motCtrl1 = GPIO.PWM(enableA, pwmfreq)
motCtrl1.start(0)
GPIO.setup(input3, GPIO.OUT)
GPIO.setup(input4, GPIO.OUT)
GPIO.setup(enableB, GPIO.OUT)
motCtrl2 = GPIO.PWM(enableB, pwmfreq)
motCtrl2.start(0)


def set_speed(speed):
    absspeed = abs(speed)
    absspeed = int(min(absspeed, 99.9))
    if speed > 0:
        GPIO.output(input1, 1)
        GPIO.output(input2, 0)
        motCtrl1.ChangeDutyCycle(absspeed)
        GPIO.output(input3, 1)
        GPIO.output(input4, 0)
        motCtrl2.ChangeDutyCycle(absspeed)
    else:
        GPIO.output(input1, 0)
        GPIO.output(input2, 1)
        motCtrl1.ChangeDutyCycle(absspeed)
        GPIO.output(input3, 0)
        GPIO.output(input4, 1)
        motCtrl2.ChangeDutyCycle(absspeed)


def stop_motors():
    GPIO.output(input1, 1)
    GPIO.output(input2, 1)
    motCtrl1.ChangeDutyCycle(90)
    GPIO.output(input3, 1)
    GPIO.output(input4, 1)
    motCtrl2.ChangeDutyCycle(90)

#Call calibration here
gB=calibration.calibrateSensors(500,imu)

# Wait for key to enter balancing mode
raw_input("------------PRESS ENTER WHEN READY TO START CONTROL LOOP------------")
# Initialize PWM to 0 
# Define previous time as time now
t=time.time()
dt=0
P=100
I=0
D=0
newSpeed=0
eI=0
e=0
try:
	currentAngle=initialAngle()
	print("%f" % (currentAngle))
	while True:
		dt=time.time()-t
		currentAngle=updateAngle()
		t=time.time()
		
		laste=e
		e=0-currentAngle
		eI+=e*dt
		eD=(e-laste)/dt
		P_term=P*e
		I_term=I*eI
		D_term=D*eD
		newSpeed=P_term+I_term+D_term
		if newSpeed>500:
			newSpeed=500
		elif newSpeed<-500:
			newSpeed=(-500)
		set_speed(newSpeed*100/500)
		print("%f %f" % (currentAngle,newSpeed*100/500))
		time.sleep(poll_interval*1.0/1000.0)
except KeyboardInterrupt:
	pass
# Stop PWM signals
stop_motors()
motCtrl1.stop()
motCtrl2.stop()
GPIO.cleanup()


